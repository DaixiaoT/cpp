                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _uart
                                     12 	.globl _main
                                     13 	.globl _uart_init
                                     14 	.globl _time0_init
                                     15 	.globl _exti0_init
                                     16 	.globl _hc595_write_data
                                     17 	.globl _key_matrix_ranks_scan
                                     18 	.globl _key_matrix_flip_scan
                                     19 	.globl _key_scan
                                     20 	.globl _smg_display
                                     21 	.globl _delay_ms
                                     22 	.globl _delay_10us
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _F1
                                     30 	.globl _P
                                     31 	.globl _PS
                                     32 	.globl _PT1
                                     33 	.globl _PX1
                                     34 	.globl _PT0
                                     35 	.globl _PX0
                                     36 	.globl _RD
                                     37 	.globl _WR
                                     38 	.globl _T1
                                     39 	.globl _T0
                                     40 	.globl _INT1
                                     41 	.globl _INT0
                                     42 	.globl _TXD
                                     43 	.globl _RXD
                                     44 	.globl _P3_7
                                     45 	.globl _P3_6
                                     46 	.globl _P3_5
                                     47 	.globl _P3_4
                                     48 	.globl _P3_3
                                     49 	.globl _P3_2
                                     50 	.globl _P3_1
                                     51 	.globl _P3_0
                                     52 	.globl _EA
                                     53 	.globl _ES
                                     54 	.globl _ET1
                                     55 	.globl _EX1
                                     56 	.globl _ET0
                                     57 	.globl _EX0
                                     58 	.globl _P2_7
                                     59 	.globl _P2_6
                                     60 	.globl _P2_5
                                     61 	.globl _P2_4
                                     62 	.globl _P2_3
                                     63 	.globl _P2_2
                                     64 	.globl _P2_1
                                     65 	.globl _P2_0
                                     66 	.globl _SM0
                                     67 	.globl _SM1
                                     68 	.globl _SM2
                                     69 	.globl _REN
                                     70 	.globl _TB8
                                     71 	.globl _RB8
                                     72 	.globl _TI
                                     73 	.globl _RI
                                     74 	.globl _P1_7
                                     75 	.globl _P1_6
                                     76 	.globl _P1_5
                                     77 	.globl _P1_4
                                     78 	.globl _P1_3
                                     79 	.globl _P1_2
                                     80 	.globl _P1_1
                                     81 	.globl _P1_0
                                     82 	.globl _TF1
                                     83 	.globl _TR1
                                     84 	.globl _TF0
                                     85 	.globl _TR0
                                     86 	.globl _IE1
                                     87 	.globl _IT1
                                     88 	.globl _IE0
                                     89 	.globl _IT0
                                     90 	.globl _P0_7
                                     91 	.globl _P0_6
                                     92 	.globl _P0_5
                                     93 	.globl _P0_4
                                     94 	.globl _P0_3
                                     95 	.globl _P0_2
                                     96 	.globl _P0_1
                                     97 	.globl _P0_0
                                     98 	.globl _TF2
                                     99 	.globl _EXF2
                                    100 	.globl _RCLK
                                    101 	.globl _TCLK
                                    102 	.globl _EXEN2
                                    103 	.globl _TR2
                                    104 	.globl _C_T2
                                    105 	.globl _CP_RL2
                                    106 	.globl _T2CON_7
                                    107 	.globl _T2CON_6
                                    108 	.globl _T2CON_5
                                    109 	.globl _T2CON_4
                                    110 	.globl _T2CON_3
                                    111 	.globl _T2CON_2
                                    112 	.globl _T2CON_1
                                    113 	.globl _T2CON_0
                                    114 	.globl _PT2
                                    115 	.globl _ET2
                                    116 	.globl _B
                                    117 	.globl _ACC
                                    118 	.globl _PSW
                                    119 	.globl _IP
                                    120 	.globl _P3
                                    121 	.globl _IE
                                    122 	.globl _P2
                                    123 	.globl _SBUF
                                    124 	.globl _SCON
                                    125 	.globl _P1
                                    126 	.globl _TH1
                                    127 	.globl _TH0
                                    128 	.globl _TL1
                                    129 	.globl _TL0
                                    130 	.globl _TMOD
                                    131 	.globl _TCON
                                    132 	.globl _PCON
                                    133 	.globl _DPH
                                    134 	.globl _DPL
                                    135 	.globl _SP
                                    136 	.globl _P0
                                    137 	.globl _TH2
                                    138 	.globl _TL2
                                    139 	.globl _RCAP2H
                                    140 	.globl _RCAP2L
                                    141 	.globl _T2CON
                                    142 	.globl _ghc595_buf
                                    143 	.globl _gsmg_code
                                    144 ;--------------------------------------------------------
                                    145 ; special function registers
                                    146 ;--------------------------------------------------------
                                    147 	.area RSEG    (ABS,DATA)
      000000                        148 	.org 0x0000
                           0000C8   149 _T2CON	=	0x00c8
                           0000CA   150 _RCAP2L	=	0x00ca
                           0000CB   151 _RCAP2H	=	0x00cb
                           0000CC   152 _TL2	=	0x00cc
                           0000CD   153 _TH2	=	0x00cd
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000D0   172 _PSW	=	0x00d0
                           0000E0   173 _ACC	=	0x00e0
                           0000F0   174 _B	=	0x00f0
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           0000AD   180 _ET2	=	0x00ad
                           0000BD   181 _PT2	=	0x00bd
                           0000C8   182 _T2CON_0	=	0x00c8
                           0000C9   183 _T2CON_1	=	0x00c9
                           0000CA   184 _T2CON_2	=	0x00ca
                           0000CB   185 _T2CON_3	=	0x00cb
                           0000CC   186 _T2CON_4	=	0x00cc
                           0000CD   187 _T2CON_5	=	0x00cd
                           0000CE   188 _T2CON_6	=	0x00ce
                           0000CF   189 _T2CON_7	=	0x00cf
                           0000C8   190 _CP_RL2	=	0x00c8
                           0000C9   191 _C_T2	=	0x00c9
                           0000CA   192 _TR2	=	0x00ca
                           0000CB   193 _EXEN2	=	0x00cb
                           0000CC   194 _TCLK	=	0x00cc
                           0000CD   195 _RCLK	=	0x00cd
                           0000CE   196 _EXF2	=	0x00ce
                           0000CF   197 _TF2	=	0x00cf
                           000080   198 _P0_0	=	0x0080
                           000081   199 _P0_1	=	0x0081
                           000082   200 _P0_2	=	0x0082
                           000083   201 _P0_3	=	0x0083
                           000084   202 _P0_4	=	0x0084
                           000085   203 _P0_5	=	0x0085
                           000086   204 _P0_6	=	0x0086
                           000087   205 _P0_7	=	0x0087
                           000088   206 _IT0	=	0x0088
                           000089   207 _IE0	=	0x0089
                           00008A   208 _IT1	=	0x008a
                           00008B   209 _IE1	=	0x008b
                           00008C   210 _TR0	=	0x008c
                           00008D   211 _TF0	=	0x008d
                           00008E   212 _TR1	=	0x008e
                           00008F   213 _TF1	=	0x008f
                           000090   214 _P1_0	=	0x0090
                           000091   215 _P1_1	=	0x0091
                           000092   216 _P1_2	=	0x0092
                           000093   217 _P1_3	=	0x0093
                           000094   218 _P1_4	=	0x0094
                           000095   219 _P1_5	=	0x0095
                           000096   220 _P1_6	=	0x0096
                           000097   221 _P1_7	=	0x0097
                           000098   222 _RI	=	0x0098
                           000099   223 _TI	=	0x0099
                           00009A   224 _RB8	=	0x009a
                           00009B   225 _TB8	=	0x009b
                           00009C   226 _REN	=	0x009c
                           00009D   227 _SM2	=	0x009d
                           00009E   228 _SM1	=	0x009e
                           00009F   229 _SM0	=	0x009f
                           0000A0   230 _P2_0	=	0x00a0
                           0000A1   231 _P2_1	=	0x00a1
                           0000A2   232 _P2_2	=	0x00a2
                           0000A3   233 _P2_3	=	0x00a3
                           0000A4   234 _P2_4	=	0x00a4
                           0000A5   235 _P2_5	=	0x00a5
                           0000A6   236 _P2_6	=	0x00a6
                           0000A7   237 _P2_7	=	0x00a7
                           0000A8   238 _EX0	=	0x00a8
                           0000A9   239 _ET0	=	0x00a9
                           0000AA   240 _EX1	=	0x00aa
                           0000AB   241 _ET1	=	0x00ab
                           0000AC   242 _ES	=	0x00ac
                           0000AF   243 _EA	=	0x00af
                           0000B0   244 _P3_0	=	0x00b0
                           0000B1   245 _P3_1	=	0x00b1
                           0000B2   246 _P3_2	=	0x00b2
                           0000B3   247 _P3_3	=	0x00b3
                           0000B4   248 _P3_4	=	0x00b4
                           0000B5   249 _P3_5	=	0x00b5
                           0000B6   250 _P3_6	=	0x00b6
                           0000B7   251 _P3_7	=	0x00b7
                           0000B0   252 _RXD	=	0x00b0
                           0000B1   253 _TXD	=	0x00b1
                           0000B2   254 _INT0	=	0x00b2
                           0000B3   255 _INT1	=	0x00b3
                           0000B4   256 _T0	=	0x00b4
                           0000B5   257 _T1	=	0x00b5
                           0000B6   258 _WR	=	0x00b6
                           0000B7   259 _RD	=	0x00b7
                           0000B8   260 _PX0	=	0x00b8
                           0000B9   261 _PT0	=	0x00b9
                           0000BA   262 _PX1	=	0x00ba
                           0000BB   263 _PT1	=	0x00bb
                           0000BC   264 _PS	=	0x00bc
                           0000D0   265 _P	=	0x00d0
                           0000D1   266 _F1	=	0x00d1
                           0000D2   267 _OV	=	0x00d2
                           0000D3   268 _RS0	=	0x00d3
                           0000D4   269 _RS1	=	0x00d4
                           0000D5   270 _F0	=	0x00d5
                           0000D6   271 _AC	=	0x00d6
                           0000D7   272 _CY	=	0x00d7
                                    273 ;--------------------------------------------------------
                                    274 ; overlayable register banks
                                    275 ;--------------------------------------------------------
                                    276 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        277 	.ds 8
                                    278 ;--------------------------------------------------------
                                    279 ; internal ram data
                                    280 ;--------------------------------------------------------
                                    281 	.area DSEG    (DATA)
      000000                        282 _gsmg_code::
      000000                        283 	.ds 17
      000011                        284 _ghc595_buf::
      000011                        285 	.ds 8
      000019                        286 _key_scan_key_65536_13:
      000019                        287 	.ds 1
      00001A                        288 _key_matrix_flip_scan_key_value_65536_22:
      00001A                        289 	.ds 1
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable items in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 	.area	OSEG    (OVR,DATA)
                                    294 	.area	OSEG    (OVR,DATA)
                                    295 	.area	OSEG    (OVR,DATA)
                                    296 ;--------------------------------------------------------
                                    297 ; Stack segment in internal ram 
                                    298 ;--------------------------------------------------------
                                    299 	.area	SSEG
      000000                        300 __start__stack:
      000000                        301 	.ds	1
                                    302 
                                    303 ;--------------------------------------------------------
                                    304 ; indirectly addressable internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area ISEG    (DATA)
                                    307 ;--------------------------------------------------------
                                    308 ; absolute internal ram data
                                    309 ;--------------------------------------------------------
                                    310 	.area IABS    (ABS,DATA)
                                    311 	.area IABS    (ABS,DATA)
                                    312 ;--------------------------------------------------------
                                    313 ; bit data
                                    314 ;--------------------------------------------------------
                                    315 	.area BSEG    (BIT)
                                    316 ;--------------------------------------------------------
                                    317 ; paged external ram data
                                    318 ;--------------------------------------------------------
                                    319 	.area PSEG    (PAG,XDATA)
                                    320 ;--------------------------------------------------------
                                    321 ; external ram data
                                    322 ;--------------------------------------------------------
                                    323 	.area XSEG    (XDATA)
                                    324 ;--------------------------------------------------------
                                    325 ; absolute external ram data
                                    326 ;--------------------------------------------------------
                                    327 	.area XABS    (ABS,XDATA)
                                    328 ;--------------------------------------------------------
                                    329 ; external initialized ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area XISEG   (XDATA)
                                    332 	.area HOME    (CODE)
                                    333 	.area GSINIT0 (CODE)
                                    334 	.area GSINIT1 (CODE)
                                    335 	.area GSINIT2 (CODE)
                                    336 	.area GSINIT3 (CODE)
                                    337 	.area GSINIT4 (CODE)
                                    338 	.area GSINIT5 (CODE)
                                    339 	.area GSINIT  (CODE)
                                    340 	.area GSFINAL (CODE)
                                    341 	.area CSEG    (CODE)
                                    342 ;--------------------------------------------------------
                                    343 ; interrupt vector 
                                    344 ;--------------------------------------------------------
                                    345 	.area HOME    (CODE)
      000000                        346 __interrupt_vect:
      000000 02r00r00         [24]  347 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  348 	reti
      000004                        349 	.ds	7
      00000B 32               [24]  350 	reti
      00000C                        351 	.ds	7
      000013 32               [24]  352 	reti
      000014                        353 	.ds	7
      00001B 32               [24]  354 	reti
      00001C                        355 	.ds	7
      000023 02r03r04         [24]  356 	ljmp	_uart
                                    357 ;--------------------------------------------------------
                                    358 ; global & static initialisations
                                    359 ;--------------------------------------------------------
                                    360 	.area HOME    (CODE)
                                    361 	.area GSINIT  (CODE)
                                    362 	.area GSFINAL (CODE)
                                    363 	.area GSINIT  (CODE)
                                    364 	.globl __sdcc_gsinit_startup
                                    365 	.globl __sdcc_program_startup
                                    366 	.globl __start__stack
                                    367 	.globl __mcs51_genXINIT
                                    368 	.globl __mcs51_genXRAMCLEAR
                                    369 	.globl __mcs51_genRAMCLEAR
                                    370 ;------------------------------------------------------------
                                    371 ;Allocation info for local variables in function 'key_scan'
                                    372 ;------------------------------------------------------------
                                    373 ;key                       Allocated with name '_key_scan_key_65536_13'
                                    374 ;mode                      Allocated to registers r7 
                                    375 ;------------------------------------------------------------
                                    376 ;	../common.h:153: static u8 key = 1;
      000000 75*19 01         [24]  377 	mov	_key_scan_key_65536_13,#0x01
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'key_matrix_flip_scan'
                                    380 ;------------------------------------------------------------
                                    381 ;key_value                 Allocated with name '_key_matrix_flip_scan_key_value_65536_22'
                                    382 ;------------------------------------------------------------
                                    383 ;	../common.h:195: static u8 key_value = 0;
      000003 75*1A 00         [24]  384 	mov	_key_matrix_flip_scan_key_value_65536_22,#0x00
                                    385 ;	../common.h:43: u8 gsmg_code[17] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d,
      000006 75*00 3F         [24]  386 	mov	_gsmg_code,#0x3f
      000009 75*01 06         [24]  387 	mov	(_gsmg_code + 0x0001),#0x06
      00000C 75*02 5B         [24]  388 	mov	(_gsmg_code + 0x0002),#0x5b
      00000F 75*03 4F         [24]  389 	mov	(_gsmg_code + 0x0003),#0x4f
      000012 75*04 66         [24]  390 	mov	(_gsmg_code + 0x0004),#0x66
      000015 75*05 6D         [24]  391 	mov	(_gsmg_code + 0x0005),#0x6d
      000018 75*06 7D         [24]  392 	mov	(_gsmg_code + 0x0006),#0x7d
      00001B 75*07 07         [24]  393 	mov	(_gsmg_code + 0x0007),#0x07
      00001E 75*08 7F         [24]  394 	mov	(_gsmg_code + 0x0008),#0x7f
      000021 75*09 6F         [24]  395 	mov	(_gsmg_code + 0x0009),#0x6f
      000024 75*0A 77         [24]  396 	mov	(_gsmg_code + 0x000a),#0x77
      000027 75*0B 7C         [24]  397 	mov	(_gsmg_code + 0x000b),#0x7c
      00002A 75*0C 39         [24]  398 	mov	(_gsmg_code + 0x000c),#0x39
      00002D 75*0D 5E         [24]  399 	mov	(_gsmg_code + 0x000d),#0x5e
      000030 75*0E 79         [24]  400 	mov	(_gsmg_code + 0x000e),#0x79
      000033 75*0F 71         [24]  401 	mov	(_gsmg_code + 0x000f),#0x71
                                    402 ;	../common.h:47: u8 ghc595_buf[8] = {
      000036 75*11 01         [24]  403 	mov	_ghc595_buf,#0x01
      000039 75*12 02         [24]  404 	mov	(_ghc595_buf + 0x0001),#0x02
      00003C 75*13 04         [24]  405 	mov	(_ghc595_buf + 0x0002),#0x04
      00003F 75*14 08         [24]  406 	mov	(_ghc595_buf + 0x0003),#0x08
      000042 75*15 10         [24]  407 	mov	(_ghc595_buf + 0x0004),#0x10
      000045 75*16 20         [24]  408 	mov	(_ghc595_buf + 0x0005),#0x20
      000048 75*17 40         [24]  409 	mov	(_ghc595_buf + 0x0006),#0x40
      00004B 75*18 80         [24]  410 	mov	(_ghc595_buf + 0x0007),#0x80
                                    411 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  412 	ljmp	__sdcc_program_startup
                                    413 ;--------------------------------------------------------
                                    414 ; Home
                                    415 ;--------------------------------------------------------
                                    416 	.area HOME    (CODE)
                                    417 	.area HOME    (CODE)
      000026                        418 __sdcc_program_startup:
      000026 02r02rFC         [24]  419 	ljmp	_main
                                    420 ;	return from main will return to caller
                                    421 ;--------------------------------------------------------
                                    422 ; code
                                    423 ;--------------------------------------------------------
                                    424 	.area CSEG    (CODE)
                                    425 ;------------------------------------------------------------
                                    426 ;Allocation info for local variables in function 'delay_10us'
                                    427 ;------------------------------------------------------------
                                    428 ;ten_us                    Allocated to registers 
                                    429 ;------------------------------------------------------------
                                    430 ;	../common.h:56: void delay_10us(u16 ten_us)
                                    431 ;	-----------------------------------------
                                    432 ;	 function delay_10us
                                    433 ;	-----------------------------------------
      000000                        434 _delay_10us:
                           000007   435 	ar7 = 0x07
                           000006   436 	ar6 = 0x06
                           000005   437 	ar5 = 0x05
                           000004   438 	ar4 = 0x04
                           000003   439 	ar3 = 0x03
                           000002   440 	ar2 = 0x02
                           000001   441 	ar1 = 0x01
                           000000   442 	ar0 = 0x00
      000000 AE 82            [24]  443 	mov	r6,dpl
      000002 AF 83            [24]  444 	mov	r7,dph
                                    445 ;	../common.h:58: while (ten_us--)
      000004                        446 00101$:
      000004 8E 04            [24]  447 	mov	ar4,r6
      000006 8F 05            [24]  448 	mov	ar5,r7
      000008 1E               [12]  449 	dec	r6
      000009 BE FF 01         [24]  450 	cjne	r6,#0xff,00111$
      00000C 1F               [12]  451 	dec	r7
      00000D                        452 00111$:
      00000D EC               [12]  453 	mov	a,r4
      00000E 4D               [12]  454 	orl	a,r5
      00000F 70 F3            [24]  455 	jnz	00101$
                                    456 ;	../common.h:60: }
      000011 22               [24]  457 	ret
                                    458 ;------------------------------------------------------------
                                    459 ;Allocation info for local variables in function 'delay_ms'
                                    460 ;------------------------------------------------------------
                                    461 ;ms                        Allocated to registers 
                                    462 ;i                         Allocated to registers r6 r7 
                                    463 ;j                         Allocated to registers r4 r5 
                                    464 ;------------------------------------------------------------
                                    465 ;	../common.h:68: void delay_ms(u16 ms)
                                    466 ;	-----------------------------------------
                                    467 ;	 function delay_ms
                                    468 ;	-----------------------------------------
      000012                        469 _delay_ms:
      000012 AE 82            [24]  470 	mov	r6,dpl
      000014 AF 83            [24]  471 	mov	r7,dph
                                    472 ;	../common.h:71: for (i = ms; i > 0; i--)
      000016                        473 00106$:
      000016 EE               [12]  474 	mov	a,r6
      000017 4F               [12]  475 	orl	a,r7
      000018 60 1B            [24]  476 	jz	00108$
                                    477 ;	../common.h:73: for(j=110; j>0; j--);
      00001A 7C 6E            [12]  478 	mov	r4,#0x6e
      00001C 7D 00            [12]  479 	mov	r5,#0x00
      00001E                        480 00104$:
      00001E EC               [12]  481 	mov	a,r4
      00001F 24 FF            [12]  482 	add	a,#0xff
      000021 FA               [12]  483 	mov	r2,a
      000022 ED               [12]  484 	mov	a,r5
      000023 34 FF            [12]  485 	addc	a,#0xff
      000025 FB               [12]  486 	mov	r3,a
      000026 8A 04            [24]  487 	mov	ar4,r2
      000028 8B 05            [24]  488 	mov	ar5,r3
      00002A EA               [12]  489 	mov	a,r2
      00002B 4B               [12]  490 	orl	a,r3
      00002C 70 F0            [24]  491 	jnz	00104$
                                    492 ;	../common.h:71: for (i = ms; i > 0; i--)
      00002E 1E               [12]  493 	dec	r6
      00002F BE FF 01         [24]  494 	cjne	r6,#0xff,00133$
      000032 1F               [12]  495 	dec	r7
      000033                        496 00133$:
      000033 80 E1            [24]  497 	sjmp	00106$
      000035                        498 00108$:
                                    499 ;	../common.h:75: }
      000035 22               [24]  500 	ret
                                    501 ;------------------------------------------------------------
                                    502 ;Allocation info for local variables in function 'smg_display'
                                    503 ;------------------------------------------------------------
                                    504 ;i                         Allocated to registers r7 
                                    505 ;------------------------------------------------------------
                                    506 ;	../common.h:83: void smg_display()
                                    507 ;	-----------------------------------------
                                    508 ;	 function smg_display
                                    509 ;	-----------------------------------------
      000036                        510 _smg_display:
                                    511 ;	../common.h:86: for (i = 8; i < 16; i++)
      000036 7F 08            [12]  512 	mov	r7,#0x08
      000038                        513 00112$:
                                    514 ;	../common.h:88: switch (i)
      000038 BF 08 00         [24]  515 	cjne	r7,#0x08,00129$
      00003B                        516 00129$:
      00003B 50 03            [24]  517 	jnc	00130$
      00003D 02r00rA7         [24]  518 	ljmp	00110$
      000040                        519 00130$:
      000040 EF               [12]  520 	mov	a,r7
      000041 24 F0            [12]  521 	add	a,#0xff - 0x0f
      000043 50 03            [24]  522 	jnc	00131$
      000045 02r00rA7         [24]  523 	ljmp	00110$
      000048                        524 00131$:
      000048 EF               [12]  525 	mov	a,r7
      000049 24 F8            [12]  526 	add	a,#0xf8
      00004B FE               [12]  527 	mov	r6,a
      00004C 24 0A            [12]  528 	add	a,#(00132$-3-.)
      00004E 83               [24]  529 	movc	a,@a+pc
      00004F F5 82            [12]  530 	mov	dpl,a
      000051 EE               [12]  531 	mov	a,r6
      000052 24 0C            [12]  532 	add	a,#(00133$-3-.)
      000054 83               [24]  533 	movc	a,@a+pc
      000055 F5 83            [12]  534 	mov	dph,a
      000057 E4               [12]  535 	clr	a
      000058 73               [24]  536 	jmp	@a+dptr
      000059                        537 00132$:
      000059r69                     538 	.db	00101$
      00005Ar71                     539 	.db	00102$
      00005Br79                     540 	.db	00103$
      00005Cr81                     541 	.db	00104$
      00005Dr89                     542 	.db	00105$
      00005Er91                     543 	.db	00106$
      00005Fr99                     544 	.db	00107$
      000060rA1                     545 	.db	00108$
      000061                        546 00133$:
      000061s00                     547 	.db	00101$>>8
      000062s00                     548 	.db	00102$>>8
      000063s00                     549 	.db	00103$>>8
      000064s00                     550 	.db	00104$>>8
      000065s00                     551 	.db	00105$>>8
      000066s00                     552 	.db	00106$>>8
      000067s00                     553 	.db	00107$>>8
      000068s00                     554 	.db	00108$>>8
                                    555 ;	../common.h:90: case 8:
      000069                        556 00101$:
                                    557 ;	../common.h:91: LSC = 1;
                                    558 ;	assignBit
      000069 D2 A4            [12]  559 	setb	_P2_4
                                    560 ;	../common.h:92: LSB = 1;
                                    561 ;	assignBit
      00006B D2 A3            [12]  562 	setb	_P2_3
                                    563 ;	../common.h:93: LSA = 1;
                                    564 ;	assignBit
      00006D D2 A2            [12]  565 	setb	_P2_2
                                    566 ;	../common.h:94: break;
                                    567 ;	../common.h:95: case 9:
      00006F 80 36            [24]  568 	sjmp	00110$
      000071                        569 00102$:
                                    570 ;	../common.h:96: LSC = 1;
                                    571 ;	assignBit
      000071 D2 A4            [12]  572 	setb	_P2_4
                                    573 ;	../common.h:97: LSB = 1;
                                    574 ;	assignBit
      000073 D2 A3            [12]  575 	setb	_P2_3
                                    576 ;	../common.h:98: LSA = 0;
                                    577 ;	assignBit
      000075 C2 A2            [12]  578 	clr	_P2_2
                                    579 ;	../common.h:99: break;
                                    580 ;	../common.h:100: case 10:
      000077 80 2E            [24]  581 	sjmp	00110$
      000079                        582 00103$:
                                    583 ;	../common.h:101: LSC = 1;
                                    584 ;	assignBit
      000079 D2 A4            [12]  585 	setb	_P2_4
                                    586 ;	../common.h:102: LSB = 0;
                                    587 ;	assignBit
      00007B C2 A3            [12]  588 	clr	_P2_3
                                    589 ;	../common.h:103: LSA = 1;
                                    590 ;	assignBit
      00007D D2 A2            [12]  591 	setb	_P2_2
                                    592 ;	../common.h:104: break;
                                    593 ;	../common.h:105: case 11:
      00007F 80 26            [24]  594 	sjmp	00110$
      000081                        595 00104$:
                                    596 ;	../common.h:106: LSC = 1;
                                    597 ;	assignBit
      000081 D2 A4            [12]  598 	setb	_P2_4
                                    599 ;	../common.h:107: LSB = 0;
                                    600 ;	assignBit
      000083 C2 A3            [12]  601 	clr	_P2_3
                                    602 ;	../common.h:108: LSA = 0;
                                    603 ;	assignBit
      000085 C2 A2            [12]  604 	clr	_P2_2
                                    605 ;	../common.h:109: break;
                                    606 ;	../common.h:110: case 12:
      000087 80 1E            [24]  607 	sjmp	00110$
      000089                        608 00105$:
                                    609 ;	../common.h:111: LSC = 0;
                                    610 ;	assignBit
      000089 C2 A4            [12]  611 	clr	_P2_4
                                    612 ;	../common.h:112: LSB = 1;
                                    613 ;	assignBit
      00008B D2 A3            [12]  614 	setb	_P2_3
                                    615 ;	../common.h:113: LSA = 1;
                                    616 ;	assignBit
      00008D D2 A2            [12]  617 	setb	_P2_2
                                    618 ;	../common.h:114: break;
                                    619 ;	../common.h:115: case 13:
      00008F 80 16            [24]  620 	sjmp	00110$
      000091                        621 00106$:
                                    622 ;	../common.h:116: LSC = 0;
                                    623 ;	assignBit
      000091 C2 A4            [12]  624 	clr	_P2_4
                                    625 ;	../common.h:117: LSB = 1;
                                    626 ;	assignBit
      000093 D2 A3            [12]  627 	setb	_P2_3
                                    628 ;	../common.h:118: LSA = 0;
                                    629 ;	assignBit
      000095 C2 A2            [12]  630 	clr	_P2_2
                                    631 ;	../common.h:119: break;
                                    632 ;	../common.h:120: case 14:
      000097 80 0E            [24]  633 	sjmp	00110$
      000099                        634 00107$:
                                    635 ;	../common.h:121: LSC = 0;
                                    636 ;	assignBit
      000099 C2 A4            [12]  637 	clr	_P2_4
                                    638 ;	../common.h:122: LSB = 0;
                                    639 ;	assignBit
      00009B C2 A3            [12]  640 	clr	_P2_3
                                    641 ;	../common.h:123: LSA = 1;
                                    642 ;	assignBit
      00009D D2 A2            [12]  643 	setb	_P2_2
                                    644 ;	../common.h:124: break;
                                    645 ;	../common.h:125: case 15:
      00009F 80 06            [24]  646 	sjmp	00110$
      0000A1                        647 00108$:
                                    648 ;	../common.h:126: LSC = 0;
                                    649 ;	assignBit
      0000A1 C2 A4            [12]  650 	clr	_P2_4
                                    651 ;	../common.h:127: LSB = 0;
                                    652 ;	assignBit
      0000A3 C2 A3            [12]  653 	clr	_P2_3
                                    654 ;	../common.h:128: LSA = 0;
                                    655 ;	assignBit
      0000A5 C2 A2            [12]  656 	clr	_P2_2
                                    657 ;	../common.h:133: }
      0000A7                        658 00110$:
                                    659 ;	../common.h:134: SMG_A_DP_PORT = gsmg_code[i];
      0000A7 EF               [12]  660 	mov	a,r7
      0000A8 24r00            [12]  661 	add	a,#_gsmg_code
      0000AA F9               [12]  662 	mov	r1,a
      0000AB 87 80            [24]  663 	mov	_P0,@r1
                                    664 ;	../common.h:135: delay_10us(100);
      0000AD 90 00 64         [24]  665 	mov	dptr,#0x0064
      0000B0 C0 07            [24]  666 	push	ar7
      0000B2 12r00r00         [24]  667 	lcall	_delay_10us
      0000B5 D0 07            [24]  668 	pop	ar7
                                    669 ;	../common.h:136: SMG_A_DP_PORT = 0x00;
      0000B7 75 80 00         [24]  670 	mov	_P0,#0x00
                                    671 ;	../common.h:86: for (i = 8; i < 16; i++)
      0000BA 0F               [12]  672 	inc	r7
      0000BB BF 10 00         [24]  673 	cjne	r7,#0x10,00134$
      0000BE                        674 00134$:
      0000BE 50 03            [24]  675 	jnc	00135$
      0000C0 02r00r38         [24]  676 	ljmp	00112$
      0000C3                        677 00135$:
                                    678 ;	../common.h:138: }
      0000C3 22               [24]  679 	ret
                                    680 ;------------------------------------------------------------
                                    681 ;Allocation info for local variables in function 'key_scan'
                                    682 ;------------------------------------------------------------
                                    683 ;key                       Allocated with name '_key_scan_key_65536_13'
                                    684 ;mode                      Allocated to registers r7 
                                    685 ;------------------------------------------------------------
                                    686 ;	../common.h:151: u8 key_scan(u8 mode)
                                    687 ;	-----------------------------------------
                                    688 ;	 function key_scan
                                    689 ;	-----------------------------------------
      0000C4                        690 _key_scan:
                                    691 ;	../common.h:154: if (mode)
      0000C4 E5 82            [12]  692 	mov	a,dpl
      0000C6 FF               [12]  693 	mov	r7,a
      0000C7 60 03            [24]  694 	jz	00102$
                                    695 ;	../common.h:156: key = 1;
      0000C9 75*19 01         [24]  696 	mov	_key_scan_key_65536_13,#0x01
      0000CC                        697 00102$:
                                    698 ;	../common.h:158: if (key == 1 && (KEY1 == 0 || KEY2 == 0 || KEY3 == 0 || KEY4 == 0)) // 任意按键按下
      0000CC 74 01            [12]  699 	mov	a,#0x01
      0000CE B5*19 31         [24]  700 	cjne	a,_key_scan_key_65536_13,00120$
      0000D1 30 B1 09         [24]  701 	jnb	_P3_1,00119$
      0000D4 30 B0 06         [24]  702 	jnb	_P3_0,00119$
      0000D7 30 B2 03         [24]  703 	jnb	_P3_2,00119$
      0000DA 20 B3 25         [24]  704 	jb	_P3_3,00120$
      0000DD                        705 00119$:
                                    706 ;	../common.h:160: delay_10us(1000); // 消抖
      0000DD 90 03 E8         [24]  707 	mov	dptr,#0x03e8
      0000E0 12r00r00         [24]  708 	lcall	_delay_10us
                                    709 ;	../common.h:161: key = 0;
      0000E3 75*19 00         [24]  710 	mov	_key_scan_key_65536_13,#0x00
                                    711 ;	../common.h:162: if (KEY1 == 0)
      0000E6 20 B1 04         [24]  712 	jb	_P3_1,00112$
                                    713 ;	../common.h:164: return KEY1_PRESS;
      0000E9 75 82 01         [24]  714 	mov	dpl,#0x01
      0000EC 22               [24]  715 	ret
      0000ED                        716 00112$:
                                    717 ;	../common.h:166: else if (KEY2 == 0)
      0000ED 20 B0 04         [24]  718 	jb	_P3_0,00109$
                                    719 ;	../common.h:168: return KEY2_PRESS;
      0000F0 75 82 01         [24]  720 	mov	dpl,#0x01
      0000F3 22               [24]  721 	ret
      0000F4                        722 00109$:
                                    723 ;	../common.h:170: else if (KEY3 == 0)
      0000F4 20 B2 04         [24]  724 	jb	_P3_2,00106$
                                    725 ;	../common.h:172: return KEY3_PRESS;
      0000F7 75 82 01         [24]  726 	mov	dpl,#0x01
      0000FA 22               [24]  727 	ret
      0000FB                        728 00106$:
                                    729 ;	../common.h:174: else if (KEY4 == 0)
      0000FB 20 B3 13         [24]  730 	jb	_P3_3,00121$
                                    731 ;	../common.h:176: return KEY4_PRESS;
      0000FE 75 82 01         [24]  732 	mov	dpl,#0x01
      000101 22               [24]  733 	ret
      000102                        734 00120$:
                                    735 ;	../common.h:179: else if (KEY1 == 1 && KEY2 == 1 && KEY3 == 1 && KEY4 == 1)
      000102 30 B1 0C         [24]  736 	jnb	_P3_1,00121$
      000105 30 B0 09         [24]  737 	jnb	_P3_0,00121$
      000108 30 B2 06         [24]  738 	jnb	_P3_2,00121$
      00010B 30 B3 03         [24]  739 	jnb	_P3_3,00121$
                                    740 ;	../common.h:181: key = 1;
      00010E 75*19 01         [24]  741 	mov	_key_scan_key_65536_13,#0x01
      000111                        742 00121$:
                                    743 ;	../common.h:183: return KEY_UNPRESS;
      000111 75 82 00         [24]  744 	mov	dpl,#0x00
                                    745 ;	../common.h:184: }
      000114 22               [24]  746 	ret
                                    747 ;------------------------------------------------------------
                                    748 ;Allocation info for local variables in function 'key_matrix_flip_scan'
                                    749 ;------------------------------------------------------------
                                    750 ;key_value                 Allocated with name '_key_matrix_flip_scan_key_value_65536_22'
                                    751 ;------------------------------------------------------------
                                    752 ;	../common.h:193: u8 key_matrix_flip_scan(void)
                                    753 ;	-----------------------------------------
                                    754 ;	 function key_matrix_flip_scan
                                    755 ;	-----------------------------------------
      000115                        756 _key_matrix_flip_scan:
                                    757 ;	../common.h:196: KEY_MATRIX_PORT = 0x0f; // 给所有行赋值0，列全为1
                                    758 ;	../common.h:197: if (KEY_MATRIX_PORT != 0x0f)
      000115 74 0F            [12]  759 	mov	a,#0x0f
      000117 F5 90            [12]  760 	mov	_P1,a
      000119 B5 90 02         [24]  761 	cjne	a,_P1,00169$
      00011C 80 73            [24]  762 	sjmp	00117$
      00011E                        763 00169$:
                                    764 ;	../common.h:199: delay_10us(1000); // 消抖
      00011E 90 03 E8         [24]  765 	mov	dptr,#0x03e8
      000121 12r00r00         [24]  766 	lcall	_delay_10us
                                    767 ;	../common.h:200: if (KEY_MATRIX_PORT != 0x0f)
      000124 74 0F            [12]  768 	mov	a,#0x0f
      000126 B5 90 02         [24]  769 	cjne	a,_P1,00170$
      000129 80 69            [24]  770 	sjmp	00118$
      00012B                        771 00170$:
                                    772 ;	../common.h:203: KEY_MATRIX_PORT = 0x0f;
      00012B 75 90 0F         [24]  773 	mov	_P1,#0x0f
                                    774 ;	../common.h:204: switch (KEY_MATRIX_PORT)
      00012E AF 90            [24]  775 	mov	r7,_P1
      000130 BF 07 02         [24]  776 	cjne	r7,#0x07,00171$
      000133 80 0F            [24]  777 	sjmp	00101$
      000135                        778 00171$:
      000135 BF 0B 02         [24]  779 	cjne	r7,#0x0b,00172$
      000138 80 0F            [24]  780 	sjmp	00102$
      00013A                        781 00172$:
      00013A BF 0D 02         [24]  782 	cjne	r7,#0x0d,00173$
      00013D 80 0F            [24]  783 	sjmp	00103$
      00013F                        784 00173$:
                                    785 ;	../common.h:206: case 0x07:
      00013F BF 0E 14         [24]  786 	cjne	r7,#0x0e,00105$
      000142 80 0F            [24]  787 	sjmp	00104$
      000144                        788 00101$:
                                    789 ;	../common.h:207: key_value = 1;
      000144 75*1A 01         [24]  790 	mov	_key_matrix_flip_scan_key_value_65536_22,#0x01
                                    791 ;	../common.h:208: break;
                                    792 ;	../common.h:209: case 0x0b:
      000147 80 0D            [24]  793 	sjmp	00105$
      000149                        794 00102$:
                                    795 ;	../common.h:210: key_value = 2;
      000149 75*1A 02         [24]  796 	mov	_key_matrix_flip_scan_key_value_65536_22,#0x02
                                    797 ;	../common.h:211: break;
                                    798 ;	../common.h:212: case 0x0d:
      00014C 80 08            [24]  799 	sjmp	00105$
      00014E                        800 00103$:
                                    801 ;	../common.h:213: key_value = 3;
      00014E 75*1A 03         [24]  802 	mov	_key_matrix_flip_scan_key_value_65536_22,#0x03
                                    803 ;	../common.h:214: break;
                                    804 ;	../common.h:215: case 0x0e:
      000151 80 03            [24]  805 	sjmp	00105$
      000153                        806 00104$:
                                    807 ;	../common.h:216: key_value = 4;
      000153 75*1A 04         [24]  808 	mov	_key_matrix_flip_scan_key_value_65536_22,#0x04
                                    809 ;	../common.h:218: }
      000156                        810 00105$:
                                    811 ;	../common.h:220: KEY_MATRIX_PORT = 0xf0;
      000156 75 90 F0         [24]  812 	mov	_P1,#0xf0
                                    813 ;	../common.h:221: switch (KEY_MATRIX_PORT)
      000159 AF 90            [24]  814 	mov	r7,_P1
      00015B BF 70 02         [24]  815 	cjne	r7,#0x70,00175$
      00015E 80 2A            [24]  816 	sjmp	00111$
      000160                        817 00175$:
      000160 BF B0 02         [24]  818 	cjne	r7,#0xb0,00176$
      000163 80 0C            [24]  819 	sjmp	00107$
      000165                        820 00176$:
      000165 BF D0 02         [24]  821 	cjne	r7,#0xd0,00177$
      000168 80 10            [24]  822 	sjmp	00108$
      00016A                        823 00177$:
                                    824 ;	../common.h:223: case 0x70:
      00016A BF E0 1D         [24]  825 	cjne	r7,#0xe0,00111$
      00016D 80 14            [24]  826 	sjmp	00109$
                                    827 ;	../common.h:224: key_value = key_value;
                                    828 ;	../common.h:225: break;
                                    829 ;	../common.h:226: case 0xb0:
      00016F 80 19            [24]  830 	sjmp	00111$
      000171                        831 00107$:
                                    832 ;	../common.h:227: key_value = key_value + 4;
      000171 AF*1A            [24]  833 	mov	r7,_key_matrix_flip_scan_key_value_65536_22
      000173 74 04            [12]  834 	mov	a,#0x04
      000175 2F               [12]  835 	add	a,r7
      000176 F5*1A            [12]  836 	mov	_key_matrix_flip_scan_key_value_65536_22,a
                                    837 ;	../common.h:228: break;
                                    838 ;	../common.h:229: case 0xd0:
      000178 80 10            [24]  839 	sjmp	00111$
      00017A                        840 00108$:
                                    841 ;	../common.h:230: key_value = key_value + 8;
      00017A AF*1A            [24]  842 	mov	r7,_key_matrix_flip_scan_key_value_65536_22
      00017C 74 08            [12]  843 	mov	a,#0x08
      00017E 2F               [12]  844 	add	a,r7
      00017F F5*1A            [12]  845 	mov	_key_matrix_flip_scan_key_value_65536_22,a
                                    846 ;	../common.h:231: break;
                                    847 ;	../common.h:232: case 0xe0:
      000181 80 07            [24]  848 	sjmp	00111$
      000183                        849 00109$:
                                    850 ;	../common.h:233: key_value = key_value + 12;
      000183 AF*1A            [24]  851 	mov	r7,_key_matrix_flip_scan_key_value_65536_22
      000185 74 0C            [12]  852 	mov	a,#0x0c
      000187 2F               [12]  853 	add	a,r7
      000188 F5*1A            [12]  854 	mov	_key_matrix_flip_scan_key_value_65536_22,a
                                    855 ;	../common.h:236: while (KEY_MATRIX_PORT != 0xf0)
      00018A                        856 00111$:
      00018A 74 F0            [12]  857 	mov	a,#0xf0
      00018C B5 90 FB         [24]  858 	cjne	a,_P1,00111$
      00018F 80 03            [24]  859 	sjmp	00118$
      000191                        860 00117$:
                                    861 ;	../common.h:242: key_value = 0;
      000191 75*1A 00         [24]  862 	mov	_key_matrix_flip_scan_key_value_65536_22,#0x00
      000194                        863 00118$:
                                    864 ;	../common.h:244: return key_value;
      000194 85*1A 82         [24]  865 	mov	dpl,_key_matrix_flip_scan_key_value_65536_22
                                    866 ;	../common.h:245: }
      000197 22               [24]  867 	ret
                                    868 ;------------------------------------------------------------
                                    869 ;Allocation info for local variables in function 'key_matrix_ranks_scan'
                                    870 ;------------------------------------------------------------
                                    871 ;key_value                 Allocated to registers r7 
                                    872 ;------------------------------------------------------------
                                    873 ;	../common.h:254: u8 key_matrix_ranks_scan(void)
                                    874 ;	-----------------------------------------
                                    875 ;	 function key_matrix_ranks_scan
                                    876 ;	-----------------------------------------
      000198                        877 _key_matrix_ranks_scan:
                                    878 ;	../common.h:256: u8 key_value = 0;
      000198 7F 00            [12]  879 	mov	r7,#0x00
                                    880 ;	../common.h:258: KEY_MATRIX_PORT = 0xf7;		 // 给第一列赋值0，其余全为1
                                    881 ;	../common.h:259: if (KEY_MATRIX_PORT != 0xf7) // 判断第一列按键是否按下
      00019A 74 F7            [12]  882 	mov	a,#0xf7
      00019C F5 90            [12]  883 	mov	_P1,a
      00019E B5 90 02         [24]  884 	cjne	a,_P1,00255$
      0001A1 80 2E            [24]  885 	sjmp	00108$
      0001A3                        886 00255$:
                                    887 ;	../common.h:261: delay_10us(1000); // 消抖
      0001A3 90 03 E8         [24]  888 	mov	dptr,#0x03e8
      0001A6 C0 07            [24]  889 	push	ar7
      0001A8 12r00r00         [24]  890 	lcall	_delay_10us
      0001AB D0 07            [24]  891 	pop	ar7
                                    892 ;	../common.h:262: switch (KEY_MATRIX_PORT)
      0001AD AE 90            [24]  893 	mov	r6,_P1
      0001AF BE 77 02         [24]  894 	cjne	r6,#0x77,00256$
      0001B2 80 0F            [24]  895 	sjmp	00101$
      0001B4                        896 00256$:
      0001B4 BE B7 02         [24]  897 	cjne	r6,#0xb7,00257$
      0001B7 80 0E            [24]  898 	sjmp	00102$
      0001B9                        899 00257$:
      0001B9 BE D7 02         [24]  900 	cjne	r6,#0xd7,00258$
      0001BC 80 0D            [24]  901 	sjmp	00103$
      0001BE                        902 00258$:
                                    903 ;	../common.h:264: case 0x77:
      0001BE BE E7 10         [24]  904 	cjne	r6,#0xe7,00108$
      0001C1 80 0C            [24]  905 	sjmp	00104$
      0001C3                        906 00101$:
                                    907 ;	../common.h:265: key_value = 1;
      0001C3 7F 01            [12]  908 	mov	r7,#0x01
                                    909 ;	../common.h:266: break;
                                    910 ;	../common.h:267: case 0xb7:
      0001C5 80 0A            [24]  911 	sjmp	00108$
      0001C7                        912 00102$:
                                    913 ;	../common.h:268: key_value = 5;
      0001C7 7F 05            [12]  914 	mov	r7,#0x05
                                    915 ;	../common.h:269: break;
                                    916 ;	../common.h:270: case 0xd7:
      0001C9 80 06            [24]  917 	sjmp	00108$
      0001CB                        918 00103$:
                                    919 ;	../common.h:271: key_value = 9;
      0001CB 7F 09            [12]  920 	mov	r7,#0x09
                                    921 ;	../common.h:272: break;
                                    922 ;	../common.h:273: case 0xe7:
      0001CD 80 02            [24]  923 	sjmp	00108$
      0001CF                        924 00104$:
                                    925 ;	../common.h:274: key_value = 13;
      0001CF 7F 0D            [12]  926 	mov	r7,#0x0d
                                    927 ;	../common.h:278: while (KEY_MATRIX_PORT != 0xf7)
      0001D1                        928 00108$:
      0001D1 74 F7            [12]  929 	mov	a,#0xf7
      0001D3 B5 90 FB         [24]  930 	cjne	a,_P1,00108$
                                    931 ;	../common.h:281: KEY_MATRIX_PORT = 0xfb;		 // 给第二列赋值0，其余全为1
                                    932 ;	../common.h:282: if (KEY_MATRIX_PORT != 0xfb) // 判断第二列按键是否按下
      0001D6 74 FB            [12]  933 	mov	a,#0xfb
      0001D8 F5 90            [12]  934 	mov	_P1,a
      0001DA B5 90 02         [24]  935 	cjne	a,_P1,00262$
      0001DD 80 2E            [24]  936 	sjmp	00118$
      0001DF                        937 00262$:
                                    938 ;	../common.h:284: delay_10us(1000);		 // 消抖
      0001DF 90 03 E8         [24]  939 	mov	dptr,#0x03e8
      0001E2 C0 07            [24]  940 	push	ar7
      0001E4 12r00r00         [24]  941 	lcall	_delay_10us
      0001E7 D0 07            [24]  942 	pop	ar7
                                    943 ;	../common.h:285: switch (KEY_MATRIX_PORT) // 保存第二列按键按下后的键值
      0001E9 AE 90            [24]  944 	mov	r6,_P1
      0001EB BE 7B 02         [24]  945 	cjne	r6,#0x7b,00263$
      0001EE 80 0F            [24]  946 	sjmp	00111$
      0001F0                        947 00263$:
      0001F0 BE BB 02         [24]  948 	cjne	r6,#0xbb,00264$
      0001F3 80 0E            [24]  949 	sjmp	00112$
      0001F5                        950 00264$:
      0001F5 BE DB 02         [24]  951 	cjne	r6,#0xdb,00265$
      0001F8 80 0D            [24]  952 	sjmp	00113$
      0001FA                        953 00265$:
                                    954 ;	../common.h:287: case 0x7b:
      0001FA BE EB 10         [24]  955 	cjne	r6,#0xeb,00118$
      0001FD 80 0C            [24]  956 	sjmp	00114$
      0001FF                        957 00111$:
                                    958 ;	../common.h:288: key_value = 2;
      0001FF 7F 02            [12]  959 	mov	r7,#0x02
                                    960 ;	../common.h:289: break;
                                    961 ;	../common.h:290: case 0xbb:
      000201 80 0A            [24]  962 	sjmp	00118$
      000203                        963 00112$:
                                    964 ;	../common.h:291: key_value = 6;
      000203 7F 06            [12]  965 	mov	r7,#0x06
                                    966 ;	../common.h:292: break;
                                    967 ;	../common.h:293: case 0xdb:
      000205 80 06            [24]  968 	sjmp	00118$
      000207                        969 00113$:
                                    970 ;	../common.h:294: key_value = 10;
      000207 7F 0A            [12]  971 	mov	r7,#0x0a
                                    972 ;	../common.h:295: break;
                                    973 ;	../common.h:296: case 0xeb:
      000209 80 02            [24]  974 	sjmp	00118$
      00020B                        975 00114$:
                                    976 ;	../common.h:297: key_value = 14;
      00020B 7F 0E            [12]  977 	mov	r7,#0x0e
                                    978 ;	../common.h:301: while (KEY_MATRIX_PORT != 0xfb)
      00020D                        979 00118$:
      00020D 74 FB            [12]  980 	mov	a,#0xfb
      00020F B5 90 FB         [24]  981 	cjne	a,_P1,00118$
                                    982 ;	../common.h:304: KEY_MATRIX_PORT = 0xfd;		 // 给第三列赋值0，其余全为1
                                    983 ;	../common.h:305: if (KEY_MATRIX_PORT != 0xfd) // 判断第三列按键是否按下
      000212 74 FD            [12]  984 	mov	a,#0xfd
      000214 F5 90            [12]  985 	mov	_P1,a
      000216 B5 90 02         [24]  986 	cjne	a,_P1,00269$
      000219 80 2E            [24]  987 	sjmp	00128$
      00021B                        988 00269$:
                                    989 ;	../common.h:307: delay_10us(1000);		 // 消抖
      00021B 90 03 E8         [24]  990 	mov	dptr,#0x03e8
      00021E C0 07            [24]  991 	push	ar7
      000220 12r00r00         [24]  992 	lcall	_delay_10us
      000223 D0 07            [24]  993 	pop	ar7
                                    994 ;	../common.h:308: switch (KEY_MATRIX_PORT) // 保存第三列按键按下后的键值
      000225 AE 90            [24]  995 	mov	r6,_P1
      000227 BE 7D 02         [24]  996 	cjne	r6,#0x7d,00270$
      00022A 80 0F            [24]  997 	sjmp	00121$
      00022C                        998 00270$:
      00022C BE BD 02         [24]  999 	cjne	r6,#0xbd,00271$
      00022F 80 0E            [24] 1000 	sjmp	00122$
      000231                       1001 00271$:
      000231 BE DD 02         [24] 1002 	cjne	r6,#0xdd,00272$
      000234 80 0D            [24] 1003 	sjmp	00123$
      000236                       1004 00272$:
                                   1005 ;	../common.h:310: case 0x7d:
      000236 BE ED 10         [24] 1006 	cjne	r6,#0xed,00128$
      000239 80 0C            [24] 1007 	sjmp	00124$
      00023B                       1008 00121$:
                                   1009 ;	../common.h:311: key_value = 3;
      00023B 7F 03            [12] 1010 	mov	r7,#0x03
                                   1011 ;	../common.h:312: break;
                                   1012 ;	../common.h:313: case 0xbd:
      00023D 80 0A            [24] 1013 	sjmp	00128$
      00023F                       1014 00122$:
                                   1015 ;	../common.h:314: key_value = 7;
      00023F 7F 07            [12] 1016 	mov	r7,#0x07
                                   1017 ;	../common.h:315: break;
                                   1018 ;	../common.h:316: case 0xdd:
      000241 80 06            [24] 1019 	sjmp	00128$
      000243                       1020 00123$:
                                   1021 ;	../common.h:317: key_value = 11;
      000243 7F 0B            [12] 1022 	mov	r7,#0x0b
                                   1023 ;	../common.h:318: break;
                                   1024 ;	../common.h:319: case 0xed:
      000245 80 02            [24] 1025 	sjmp	00128$
      000247                       1026 00124$:
                                   1027 ;	../common.h:320: key_value = 15;
      000247 7F 0F            [12] 1028 	mov	r7,#0x0f
                                   1029 ;	../common.h:324: while (KEY_MATRIX_PORT != 0xfd)
      000249                       1030 00128$:
      000249 74 FD            [12] 1031 	mov	a,#0xfd
      00024B B5 90 FB         [24] 1032 	cjne	a,_P1,00128$
                                   1033 ;	../common.h:327: KEY_MATRIX_PORT = 0xfe;		 // 给第四列赋值0，其余全为1
                                   1034 ;	../common.h:328: if (KEY_MATRIX_PORT != 0xfe) // 判断第四列按键是否按下
      00024E 74 FE            [12] 1035 	mov	a,#0xfe
      000250 F5 90            [12] 1036 	mov	_P1,a
      000252 B5 90 02         [24] 1037 	cjne	a,_P1,00276$
      000255 80 2E            [24] 1038 	sjmp	00138$
      000257                       1039 00276$:
                                   1040 ;	../common.h:330: delay_10us(1000);		 // 消抖
      000257 90 03 E8         [24] 1041 	mov	dptr,#0x03e8
      00025A C0 07            [24] 1042 	push	ar7
      00025C 12r00r00         [24] 1043 	lcall	_delay_10us
      00025F D0 07            [24] 1044 	pop	ar7
                                   1045 ;	../common.h:331: switch (KEY_MATRIX_PORT) // 保存第四列按键按下后的键值
      000261 AE 90            [24] 1046 	mov	r6,_P1
      000263 BE 7E 02         [24] 1047 	cjne	r6,#0x7e,00277$
      000266 80 0F            [24] 1048 	sjmp	00131$
      000268                       1049 00277$:
      000268 BE BE 02         [24] 1050 	cjne	r6,#0xbe,00278$
      00026B 80 0E            [24] 1051 	sjmp	00132$
      00026D                       1052 00278$:
      00026D BE DE 02         [24] 1053 	cjne	r6,#0xde,00279$
      000270 80 0D            [24] 1054 	sjmp	00133$
      000272                       1055 00279$:
                                   1056 ;	../common.h:333: case 0x7e:
      000272 BE EE 10         [24] 1057 	cjne	r6,#0xee,00138$
      000275 80 0C            [24] 1058 	sjmp	00134$
      000277                       1059 00131$:
                                   1060 ;	../common.h:334: key_value = 4;
      000277 7F 04            [12] 1061 	mov	r7,#0x04
                                   1062 ;	../common.h:335: break;
                                   1063 ;	../common.h:336: case 0xbe:
      000279 80 0A            [24] 1064 	sjmp	00138$
      00027B                       1065 00132$:
                                   1066 ;	../common.h:337: key_value = 8;
      00027B 7F 08            [12] 1067 	mov	r7,#0x08
                                   1068 ;	../common.h:338: break;
                                   1069 ;	../common.h:339: case 0xde:
      00027D 80 06            [24] 1070 	sjmp	00138$
      00027F                       1071 00133$:
                                   1072 ;	../common.h:340: key_value = 12;
      00027F 7F 0C            [12] 1073 	mov	r7,#0x0c
                                   1074 ;	../common.h:341: break;
                                   1075 ;	../common.h:342: case 0xee:
      000281 80 02            [24] 1076 	sjmp	00138$
      000283                       1077 00134$:
                                   1078 ;	../common.h:343: key_value = 16;
      000283 7F 10            [12] 1079 	mov	r7,#0x10
                                   1080 ;	../common.h:347: while (KEY_MATRIX_PORT != 0xfe)
      000285                       1081 00138$:
      000285 74 FE            [12] 1082 	mov	a,#0xfe
      000287 B5 90 FB         [24] 1083 	cjne	a,_P1,00138$
                                   1084 ;	../common.h:350: return key_value;
      00028A 8F 82            [24] 1085 	mov	dpl,r7
                                   1086 ;	../common.h:351: }
      00028C 22               [24] 1087 	ret
                                   1088 ;------------------------------------------------------------
                                   1089 ;Allocation info for local variables in function 'hc595_write_data'
                                   1090 ;------------------------------------------------------------
                                   1091 ;dat                       Allocated to registers r7 
                                   1092 ;i                         Allocated to registers r6 
                                   1093 ;------------------------------------------------------------
                                   1094 ;	../common.h:359: void hc595_write_data(u8 dat)
                                   1095 ;	-----------------------------------------
                                   1096 ;	 function hc595_write_data
                                   1097 ;	-----------------------------------------
      00028D                       1098 _hc595_write_data:
      00028D AF 82            [24] 1099 	mov	r7,dpl
                                   1100 ;	../common.h:362: for (i = 0; i < 8; i++)
      00028F 7E 00            [12] 1101 	mov	r6,#0x00
      000291                       1102 00102$:
                                   1103 ;	../common.h:364: SER = dat >> 7; // 优先传输一个字节中的高位
      000291 EF               [12] 1104 	mov	a,r7
      000292 23               [12] 1105 	rl	a
      000293 54 01            [12] 1106 	anl	a,#0x01
                                   1107 ;	assignBit
      000295 24 FF            [12] 1108 	add	a,#0xff
      000297 92 B4            [24] 1109 	mov	_P3_4,c
                                   1110 ;	../common.h:365: dat <<= 1;		// 将低位移动到高位
      000299 8F 05            [24] 1111 	mov	ar5,r7
      00029B ED               [12] 1112 	mov	a,r5
      00029C 2D               [12] 1113 	add	a,r5
      00029D FF               [12] 1114 	mov	r7,a
                                   1115 ;	../common.h:366: SRCLK = 0;
                                   1116 ;	assignBit
      00029E C2 B6            [12] 1117 	clr	_P3_6
                                   1118 ;	../common.h:367: delay_10us(1);
      0002A0 90 00 01         [24] 1119 	mov	dptr,#0x0001
      0002A3 C0 07            [24] 1120 	push	ar7
      0002A5 C0 06            [24] 1121 	push	ar6
      0002A7 12r00r00         [24] 1122 	lcall	_delay_10us
                                   1123 ;	../common.h:368: SRCLK = 1;
                                   1124 ;	assignBit
      0002AA D2 B6            [12] 1125 	setb	_P3_6
                                   1126 ;	../common.h:369: delay_10us(1); // 移位寄存器时钟上升沿将端口数据送入寄存器中
      0002AC 90 00 01         [24] 1127 	mov	dptr,#0x0001
      0002AF 12r00r00         [24] 1128 	lcall	_delay_10us
      0002B2 D0 06            [24] 1129 	pop	ar6
      0002B4 D0 07            [24] 1130 	pop	ar7
                                   1131 ;	../common.h:362: for (i = 0; i < 8; i++)
      0002B6 0E               [12] 1132 	inc	r6
      0002B7 BE 08 00         [24] 1133 	cjne	r6,#0x08,00115$
      0002BA                       1134 00115$:
      0002BA 40 D5            [24] 1135 	jc	00102$
                                   1136 ;	../common.h:371: RCLK = 0;
                                   1137 ;	assignBit
      0002BC C2 B5            [12] 1138 	clr	_P3_5
                                   1139 ;	../common.h:372: delay_10us(1);
      0002BE 90 00 01         [24] 1140 	mov	dptr,#0x0001
      0002C1 12r00r00         [24] 1141 	lcall	_delay_10us
                                   1142 ;	../common.h:373: RCLK = 1; // 存储寄存器时钟上升沿将前面写入到寄存器的数据输出
                                   1143 ;	assignBit
      0002C4 D2 B5            [12] 1144 	setb	_P3_5
                                   1145 ;	../common.h:374: }
      0002C6 22               [24] 1146 	ret
                                   1147 ;------------------------------------------------------------
                                   1148 ;Allocation info for local variables in function 'exti0_init'
                                   1149 ;------------------------------------------------------------
                                   1150 ;	../common.h:383: void exti0_init(void){
                                   1151 ;	-----------------------------------------
                                   1152 ;	 function exti0_init
                                   1153 ;	-----------------------------------------
      0002C7                       1154 _exti0_init:
                                   1155 ;	../common.h:384: IT0=1;//跳变沿触发方式
                                   1156 ;	assignBit
      0002C7 D2 88            [12] 1157 	setb	_IT0
                                   1158 ;	../common.h:385: EX0=1;//打开INT0的中断允许
                                   1159 ;	assignBit
      0002C9 D2 A8            [12] 1160 	setb	_EX0
                                   1161 ;	../common.h:386: EA=1;//打开总中断
                                   1162 ;	assignBit
      0002CB D2 AF            [12] 1163 	setb	_EA
                                   1164 ;	../common.h:387: }
      0002CD 22               [24] 1165 	ret
                                   1166 ;------------------------------------------------------------
                                   1167 ;Allocation info for local variables in function 'time0_init'
                                   1168 ;------------------------------------------------------------
                                   1169 ;	../common.h:396: void time0_init(void){
                                   1170 ;	-----------------------------------------
                                   1171 ;	 function time0_init
                                   1172 ;	-----------------------------------------
      0002CE                       1173 _time0_init:
                                   1174 ;	../common.h:397: TMOD|=0x01;//选择为定时器0模式，工作方式1
      0002CE AE 89            [24] 1175 	mov	r6,_TMOD
      0002D0 43 06 01         [24] 1176 	orl	ar6,#0x01
      0002D3 8E 89            [24] 1177 	mov	_TMOD,r6
                                   1178 ;	../common.h:398: TH0=0XFC;//给定时器赋初值，定时1ms
      0002D5 75 8C FC         [24] 1179 	mov	_TH0,#0xfc
                                   1180 ;	../common.h:399: TL0=0X18;
      0002D8 75 8A 18         [24] 1181 	mov	_TL0,#0x18
                                   1182 ;	../common.h:400: ET0=1;//打开定时器0的中断允许
                                   1183 ;	assignBit
      0002DB D2 A9            [12] 1184 	setb	_ET0
                                   1185 ;	../common.h:401: EA=1;//打开总中断
                                   1186 ;	assignBit
      0002DD D2 AF            [12] 1187 	setb	_EA
                                   1188 ;	../common.h:402: TR0=1;//打开定时器
                                   1189 ;	assignBit
      0002DF D2 8C            [12] 1190 	setb	_TR0
                                   1191 ;	../common.h:403: }
      0002E1 22               [24] 1192 	ret
                                   1193 ;------------------------------------------------------------
                                   1194 ;Allocation info for local variables in function 'uart_init'
                                   1195 ;------------------------------------------------------------
                                   1196 ;baud                      Allocated to registers r7 
                                   1197 ;------------------------------------------------------------
                                   1198 ;	../common.h:412: void uart_init(u8 baud){
                                   1199 ;	-----------------------------------------
                                   1200 ;	 function uart_init
                                   1201 ;	-----------------------------------------
      0002E2                       1202 _uart_init:
      0002E2 AF 82            [24] 1203 	mov	r7,dpl
                                   1204 ;	../common.h:413: TMOD |= 0X20; //设置计数器工作方式2
      0002E4 AD 89            [24] 1205 	mov	r5,_TMOD
      0002E6 43 05 20         [24] 1206 	orl	ar5,#0x20
      0002E9 8D 89            [24] 1207 	mov	_TMOD,r5
                                   1208 ;	../common.h:414: SCON = 0X50;//设置工作方式1
      0002EB 75 98 50         [24] 1209 	mov	_SCON,#0x50
                                   1210 ;	../common.h:415: PCON = 0X80;//波特率加倍
      0002EE 75 87 80         [24] 1211 	mov	_PCON,#0x80
                                   1212 ;	../common.h:416: TH1 = baud; //计数器初始值设置
      0002F1 8F 8D            [24] 1213 	mov	_TH1,r7
                                   1214 ;	../common.h:417: TL1 = baud;
      0002F3 8F 8B            [24] 1215 	mov	_TL1,r7
                                   1216 ;	../common.h:418: ES = 1;	//打开接收中断
                                   1217 ;	assignBit
      0002F5 D2 AC            [12] 1218 	setb	_ES
                                   1219 ;	../common.h:419: EA = 1;	//打开总中断
                                   1220 ;	assignBit
      0002F7 D2 AF            [12] 1221 	setb	_EA
                                   1222 ;	../common.h:420: TR1 = 1;//打开计数器
                                   1223 ;	assignBit
      0002F9 D2 8E            [12] 1224 	setb	_TR1
                                   1225 ;	../common.h:421: }
      0002FB 22               [24] 1226 	ret
                                   1227 ;------------------------------------------------------------
                                   1228 ;Allocation info for local variables in function 'main'
                                   1229 ;------------------------------------------------------------
                                   1230 ;	main.c:2: void main(){
                                   1231 ;	-----------------------------------------
                                   1232 ;	 function main
                                   1233 ;	-----------------------------------------
      0002FC                       1234 _main:
                                   1235 ;	main.c:3: uart_init(0XFA);//波特率为9600
      0002FC 75 82 FA         [24] 1236 	mov	dpl,#0xfa
      0002FF 12r02rE2         [24] 1237 	lcall	_uart_init
                                   1238 ;	main.c:4: while(1){
      000302                       1239 00102$:
                                   1240 ;	main.c:7: }
      000302 80 FE            [24] 1241 	sjmp	00102$
                                   1242 ;------------------------------------------------------------
                                   1243 ;Allocation info for local variables in function 'uart'
                                   1244 ;------------------------------------------------------------
                                   1245 ;rec_data                  Allocated to registers 
                                   1246 ;------------------------------------------------------------
                                   1247 ;	main.c:8: void uart() __interrupt 4
                                   1248 ;	-----------------------------------------
                                   1249 ;	 function uart
                                   1250 ;	-----------------------------------------
      000304                       1251 _uart:
                                   1252 ;	main.c:11: RI = 0;
                                   1253 ;	assignBit
      000304 C2 98            [12] 1254 	clr	_RI
                                   1255 ;	main.c:12: rec_data=SBUF;
      000306 85 99 99         [24] 1256 	mov	_SBUF,_SBUF
                                   1257 ;	main.c:14: while(!TI);
      000309                       1258 00101$:
                                   1259 ;	main.c:15: TI=0;
                                   1260 ;	assignBit
      000309 10 99 02         [24] 1261 	jbc	_TI,00114$
      00030C 80 FB            [24] 1262 	sjmp	00101$
      00030E                       1263 00114$:
                                   1264 ;	main.c:16: }
      00030E 32               [24] 1265 	reti
                                   1266 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1267 ;	eliminated unneeded push/pop psw
                                   1268 ;	eliminated unneeded push/pop dpl
                                   1269 ;	eliminated unneeded push/pop dph
                                   1270 ;	eliminated unneeded push/pop b
                                   1271 ;	eliminated unneeded push/pop acc
                                   1272 	.area CSEG    (CODE)
                                   1273 	.area CONST   (CODE)
                                   1274 	.area XINIT   (CODE)
                                   1275 	.area CABS    (ABS,CODE)
